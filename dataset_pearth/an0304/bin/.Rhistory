library(DESeq2)     # differential analysis
library(ape)        # clustering QC
library(ggplot2)    # PCA plotting
library(ggrepel)
library(dplyr)            # data manipulations
library(DESeq2)     # differential analysis
library(ape)        # clustering QC
library(ggplot2)    # PCA plotting
library(ggrepel)
library(dplyr)            # data manipulations
library(DESeq2)     # differential analysis
library(ape)        # clustering QC
library(ggplot2)    # PCA plotting
library(ggrepel)
library(dplyr)            # data manipulations
newAnnotation <- read.table("../resources/rename.csv", header=T, sep=",")
targets <- read.table("../resources/original.targets.csv", header=T, sep=",")
library(stringr)
newTargets <- as.data.frame(str_split_fixed(targets$suppliedID, "_", 2))
newTargets$id <- targets$suppliedID
newTargets <- merge(newTargets, newAnnotation, by.x="V1", by.y="Sample.Name")
colnames(newTargets)[1] <- "analysisID"
colnames(newTargets)[4] <- "sampleGroup"
## remove all index samples
newTargets <- dplyr::filter(newTargets, V2!='Index')
write.table(newTargets, "../resources/targets.csv", sep=",", col.names=T, row.names=F, quote=F)
setwd("~/OneDrive - Cardiff University/04-work/analysis/peter_ghazal_temp/an0304/bin")
#countInputFiles <- c("all.markdup.genecount", "all.rmdup.genecount")
countInputFiles <- c("all.markdup.genecount")
fpkmCountfilters <- c("nofilter", 0, 0.5, 5)
#fpkmCountfilters <- c(5)
myComparisons <- c("C-LOS_vs_Contaminant", "C-LOS_vs_N-LOS", "C-LOS_vs_P-LOS", "N-LOS_vs_Contaminant", "N-LOS_vs_C-LOS", "N-LOS_vs_P-LOS", "P-LOS_vs_Contaminant", "P-LOS_vs_N-LOS", "P-LOS_vs_C-LOS", "Contaminant_vs_C-LOS", "Contaminant_vs_N-LOS", "Contaminant_vs_P-LOS")
apadjCutoffs <- c("allgenes", "top50genes", "sig0-01", "sig0-05")
#outliers <- NULL
## reasons for removing = low yield
## note low run are retained, because taking them out gives no significant genes ("11289_ICG200462A", "81051_SOG1000041A")
outliers <- NULL
## first-round
#outliers <- c("10481_sepsis", "10108_sepsis", "10501_Index", "10127_sepsis", "10281_Index", "10509_Index")
pcaWindows <- c("sampleGroup")
# Chunk 1
setwd("~/OneDrive - Cardiff University/04-work/analysis/peter_ghazal_temp/an0304/bin")
#countInputFiles <- c("all.markdup.genecount", "all.rmdup.genecount")
countInputFiles <- c("all.markdup.genecount")
fpkmCountfilters <- c("nofilter", 0, 0.5, 5)
#fpkmCountfilters <- c(5)
myComparisons <- c("C-LOS_vs_Contaminant", "C-LOS_vs_N-LOS", "C-LOS_vs_P-LOS", "N-LOS_vs_Contaminant", "N-LOS_vs_C-LOS", "N-LOS_vs_P-LOS", "P-LOS_vs_Contaminant", "P-LOS_vs_N-LOS", "P-LOS_vs_C-LOS", "Contaminant_vs_C-LOS", "Contaminant_vs_N-LOS", "Contaminant_vs_P-LOS")
apadjCutoffs <- c("allgenes", "top50genes", "sig0-01", "sig0-05")
#outliers <- NULL
## reasons for removing = low yield
## note low run are retained, because taking them out gives no significant genes ("11289_ICG200462A", "81051_SOG1000041A")
outliers <- NULL
## first-round
#outliers <- c("10481_sepsis", "10108_sepsis", "10501_Index", "10127_sepsis", "10281_Index", "10509_Index")
pcaWindows <- c("sampleGroup")
# Chunk 2
library(DESeq2)     # differential analysis
library(ape)        # clustering QC
library(ggplot2)    # PCA plotting
library(ggrepel)
library(dplyr)            # data manipulations
# Chunk 3
newAnnotation <- read.table("../resources/rename.csv", header=T, sep=",")
targets <- read.table("../resources/original.targets.csv", header=T, sep=",")
library(stringr)
newTargets <- as.data.frame(str_split_fixed(targets$suppliedID, "_", 2))
newTargets$id <- targets$suppliedID
newTargets <- merge(newTargets, newAnnotation, by.x="V1", by.y="Sample.Name")
colnames(newTargets)[1] <- "analysisID"
colnames(newTargets)[4] <- "sampleGroup"
## remove all index samples
newTargets <- dplyr::filter(newTargets, V2!='Index')
write.table(newTargets, "../resources/targets.csv", sep=",", col.names=T, row.names=F, quote=F)
# Chunk 4
rawDataTop <- read.table("../input/top/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
rawDataMiddle <- read.table("../input/middle/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
rawDataBottom <- read.table("../input/bottom/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
# Chunk 5
topups <- c("10022_sepsis.b", "10030_NO_LOS.b", "10036_NO_LOS.b", "10051_NO_LOS.b", "10106_sepsis.b", "10108_sepsis.b", "10161_sepsis.b", "10191_Index.b", "10237_sepsis.b", "10254_Index.b", "10254_NO_LOS.b", "10259_sepsis.b", "10333_NO_LOS.b", "10376_sepsis.b", "10429_sepsis.b", "10464_NO_LOS.b", "10465_Index.b", "10474_NO_LOS.b")
repalcedups <- c()
rawDataTopups <- read.table("../input/topups/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
## TOP
tempData <- rawDataTop
## paranoia check
if (all(tempData$ensemblGeneID != rawDataTopups$ensemblGeneID)) { stop() }
for (coln in topups) {
oldColn <- gsub(".b", "", coln)
oldColn <- gsub("NO_LOS", "NOLOS", oldColn)
if (oldColn %in% colnames(tempData)) {
print (oldColn)
tempData[oldColn] <- tempData[oldColn] + rawDataTopups[coln]
repalcedups <- c(repalcedups, oldColn)
}
}
rawDataTop <- tempData
## MIDDLE
tempData <- rawDataMiddle
## paranoia check
if (all(tempData$ensemblGeneID != rawDataTopups$ensemblGeneID)) { stop() }
for (coln in topups) {
oldColn <- gsub(".b", "", coln)
oldColn <- gsub("NO_LOS", "NOLOS", oldColn)
if (oldColn %in% colnames(tempData)) {
print (oldColn)
tempData[oldColn] <- tempData[oldColn] + rawDataTopups[coln]
repalcedups <- c(repalcedups, oldColn)
}
}
rawDataMiddle <- tempData
## BOTTOM
tempData <- rawDataBottom
## paranoia check
if (all(tempData$ensemblGeneID != rawDataTopups$ensemblGeneID)) { stop() }
for (coln in topups) {
oldColn <- gsub(".b", "", coln)
oldColn <- gsub("NO_LOS", "NOLOS", oldColn)
if (oldColn %in% colnames(tempData)) {
print (oldColn)
tempData[oldColn] <- tempData[oldColn] + rawDataTopups[coln]
repalcedups <- c(repalcedups, oldColn)
}
}
rawDataBottom <- tempData
# Chunk 6
rawData <- merge(rawDataTop, rawDataMiddle, by="ensemblGeneID")
rawData <-  dplyr::select(rawData, -geneLength.y, -geneName.y, -geneBiotype.y)
colnames(rawData)[2:4] <- c("geneLength", "geneName", "geneBiotype")
rawData <- merge(rawData, rawDataBottom, by="ensemblGeneID")
rawData <-  dplyr::select(rawData, -geneLength.y, -geneName.y, -geneBiotype.y)
colnames(rawData)[2:4] <- c("geneLength", "geneName", "geneBiotype")
# remove asll Inded
rawData <-  dplyr::select(rawData, -contains("Index"))
colnames(rawData) <- newTargets$analysisID[match(colnames(rawData), newTargets$id)]
colnames(rawData)[1:4] <- c("ensemblGeneID", "geneLength", "geneName", "geneBiotype")
write.table(rawData, file="../input/all.markdup.genecount.txt", sep="\t", col.names=T, row.names=F)
geneLengths <- dplyr::select(rawData, ensemblGeneID, geneLength)
# Chunk 7
RunDeseq2 <- function(rc, gl) {
## create the experimental design object for DeSeq2
exptDesign <- data.frame(
row.names = colnames(rc),
condition = sampleGroups)
## construct experiment object
exptObject <- DESeqDataSetFromMatrix(
countData = rc,
colData = exptDesign,
design = ~ condition)
## run the anlysis
analysisObject = DESeq(exptObject)
## add gene lengths to the analysis object for the FPKM calculation
geneLengthsTemp <- gl[gl$ensemblGeneID %in% rownames(analysisObject),]
mcols(analysisObject)$basepairs <- geneLengthsTemp[match(rownames(analysisObject), geneLengthsTemp$ensemblGeneID),]$geneLength
return(analysisObject)
}
GetUniqueGenes <- function(anr, ty) {
sgenes <- NULL
anr <- anr[order(anr$pvalue), ]
if (ty == "allgenes") {
sgenes <- rownames(anr)
} else if (grepl("^sig", ty)) {
ty <- gsub("-", ".", gsub("sig", "", ty))
## need to get genes that are also NA but significant
for (i in 1:length(anr[,1])) {
if (is.na(anr[i,]$padj)) {
sgenes <- c(sgenes, rownames((anr[i,])))
} else if ((as.numeric(anr[i,]$padj) < as.numeric(ty))) {
sgenes <- c(sgenes, rownames((anr[i,])))
} else {
break
}
}
} else if (grepl("^top", ty)) {
ty <- gsub("top", "", gsub("genes", "", ty))
sgenes <- rownames(anr[1:as.numeric(ty),])
} else {
stop("cuttoff not recognised")
}
return (sgenes)
}
# Chunk 8
## loop over the 2 files under input/
for (countfilter in fpkmCountfilters) {
for (file in countInputFiles) {
# open targets file for reading
targets <- read.table("../resources/targets.csv", sep=",", header=T)
## read input file
rawCounts = read.table(paste("../input/", file, ".txt", sep=""), sep="\t", header=TRUE, check.names=F)
## remove outliers
if (length(outliers) > 0) {
targets <- targets[!targets$analysisID %in% outliers, ]
rawCounts <- rawCounts[, !(names(rawCounts) %in% outliers)]
}
## remove any minus sign from the column names
colnames(rawCounts) <- sub("-", ".", colnames(rawCounts))
# parse out the 3 first columns of annotation
annotationNames <- rawCounts[,c(1:4)]
# get the sample groups and mouse definitions from targets
sampleGroups <- targets$sampleGroup
## RUN ANALYSIS
# add rownames to the raw data, and remove all annotation columns
rownames(rawCounts) = rawCounts[,1]
rawCounts[,c(1:4)] <- NULL
## check the order of the targets files and input counts file are identical
if (!identical(as.character(targets$analysisID), colnames(rawCounts))) {
rawCounts <- dplyr::select(rawCounts, as.character(targets$analysisID))
}
## run analysis without filters
analysisObject <- RunDeseq2(rawCounts, geneLengths)
## get FPKM normalised data from the analysis object
rawCounts <- counts(analysisObject, normalized = FALSE)
fpkmNormalisedCounts <- fpkm(analysisObject, robust = TRUE)
if (!identical(rownames(rawCounts), rownames(fpkmNormalisedCounts))) {
stop()
}
## filter the object by FPKMs
if (countfilter != "nofilter") {
## exclude any gene where it's value is not greater than "countfilter" over any condition
rawCountsToKeep <- rawCounts[rowSums(fpkmNormalisedCounts > countfilter) >= 1, ]
## run analysis with filters
analysisObject <- RunDeseq2(rawCountsToKeep, geneLengths)
}
## get normalised data from the analysis object
rawCounts <- counts(analysisObject, normalized = FALSE)
normalisedCounts <- counts(analysisObject, normalized = TRUE)
fpkmNormalisedCounts <- fpkm(analysisObject, robust = TRUE)
if (!identical(rownames(rawCounts), rownames(normalisedCounts))) { stop() }
if (!identical(rownames(fpkmNormalisedCounts), rownames(rawCounts))) { stop() }
## merge raw and normalised data
## add the words "raw.counts" to each column names
colnames(rawCounts) = gsub("^", "raw.counts.", colnames(rawCounts))
colnames(normalisedCounts) = gsub("^", "norm.counts.", colnames(normalisedCounts))
colnames(fpkmNormalisedCounts) = gsub("^", "fpkm.norm.counts.", colnames(fpkmNormalisedCounts))
tempData = merge(rawCounts, normalisedCounts, by="row.names", all=T)
rownames(tempData) <- tempData[,1]
tempData[,1] <- NULL
finalData = merge(tempData, fpkmNormalisedCounts, by="row.names", all=T)
rownames(finalData) <- finalData[,1]
finalData[,1] <- NULL
printNormCounts <- data.frame(ensembleID=rownames(fpkmNormalisedCounts), fpkmNormalisedCounts)
## circle over the comparisons of everything versus everything
for (myComparison in myComparisons) {
numerator <- unlist(strsplit(myComparison, "_vs_"))[1]
denominator <- unlist(strsplit(myComparison, "_vs_"))[2]
print(myComparison)
result <- as.data.frame(results(analysisObject, contrast=c("condition", numerator, denominator), independentFiltering=TRUE, pAdjustMethod="BH"))
slimData <- as.data.frame(cbind(rownames(finalData), finalData))
colnames(slimData)[1] <-  "tracking_id"
## get only the genes of interest
slimData <- dplyr::select(slimData, tracking_id, colnames(dplyr::select(slimData, paste("raw.counts", unlist(subset(targets, sampleGroup == numerator, analysisID)), sep="."), paste("raw.counts", unlist(subset(targets, sampleGroup == denominator, analysisID)), sep="."), paste("norm.counts", unlist(subset(targets, sampleGroup == numerator, analysisID)), sep="."), paste("norm.counts", unlist(subset(targets, sampleGroup == denominator, analysisID)), sep="."), paste("fpkm.norm.counts", unlist(subset(targets, sampleGroup == numerator, analysisID)), sep="."), paste("fpkm.norm.counts", unlist(subset(targets, sampleGroup == denominator, analysisID)), sep="."))))
printData <- merge(slimData, result, by.x = "tracking_id", by.y = "row.names", all = T)
## add annotation
printData <- merge(annotationNames, printData, by.x="ensemblGeneID", by.y="tracking_id")
printData <- printData[order(printData$pvalue), ]
## add second header
printData %>% mutate_if(is.factor, as.character) -> printData2
printData2 <- rbind(colnames(printData), printData2)
## get group names for final output file
temp <- colnames(slimData[-1])
temp <- gsub("^raw.counts.", "", gsub("^norm.counts.", "", gsub("^fpkm.norm.counts.", "", temp)))
outputColHeadings <- c(colnames(annotationNames), as.vector(targets$sampleGroup[match(temp, targets$analysisID)]), colnames(result))
printData2 <- rbind(outputColHeadings, printData2)
## comment on outliers removed
commentLine <- rep("", length(outputColHeadings))
commentLine[1] <- paste("## Outliers removed: ", paste(outliers, collapse=" "), sep="")
printData2 <- rbind(commentLine, printData2)
write.table(printData2, file=paste("../output/", numerator, "_vs_", denominator, ".", file, ".FPKM", countfilter, ".allnorm.txt", sep=""), col.names=F, row.names=F, sep="\t", quote=F)
}
## perform ANOVA for the PCA: looking for changing genes across the entire experiment
anovaResult <- as.data.frame(results(analysisObject, pAdjustMethod="BH"))
anovaResult <- anovaResult[order(anovaResult$pvalue), ]
## plot all genes PCA
for (dirName in apadjCutoffs) {
print(dirName )
## get unique genes
uniqueSignificantGenes <- GetUniqueGenes(anovaResult, dirName);
if (length(uniqueSignificantGenes) > 5) {
## create a directory under output if not there already
if (!file.exists(paste("../output/", dirName, sep=""))) {
dir.create(file.path("../output/", dirName))
}
## create subset of significant genes
pcaDD <- subset(fpkmNormalisedCounts, rownames(rawCounts) %in% uniqueSignificantGenes)
## create object for hierarchical clustering
hierData <- pcaDD
## change label name to feature sampleGroup
b <- NULL
for (a in gsub("^fpkm.norm.counts.", "", colnames(hierData))) {
b <- c(b, paste(as.vector(targets$sampleGroup[targets$analysisID == a]), a, sep=" "))
}
colnames(hierData) <- b
d <- cor(hierData, method="pearson")
hc <- hclust(dist(1-d))
## write to outputfile
hierData <- data.frame(ensembleGeneID=rownames(hierData), hierData)
aa <- subset(rawData, ensemblGeneID %in% rownames(hierData), select=c(ensemblGeneID, geneName))
bb <- merge(aa, hierData,  by.y="row.names", by.x="ensemblGeneID")
bb[,3] <- NULL
write.table(bb, file=paste("../output/", dirName, "/hcluster.", file, ".FPKM", countfilter, ".FPKM.", dirName, ".txt", sep=""), col.names=T, row.names=F, sep="\t", quote=F)
## create pca object
pca <- prcomp(t(pcaDD), center=TRUE, scale=F)
scores <- data.frame(targets$analysisID, pca$x[,1:2])
# write PCA coordinates to file
write.table(scores, paste("../output/", dirName, "/PCA.", file, ".FPKM", countfilter, ".coord.", dirName, ".txt", sep=""), sep="\t", row.names = F, quote = F)
# write loadings to a file
aload <- abs(pca$rotation)
loadings <- sweep(aload, 2, colSums(aload), "/")
loadings <- cbind(row.names(loadings), loadings)
write.table(loadings, paste("../output/", dirName, "/PCA.", file, ".FPKM", countfilter, ".load.", dirName, ".txt", sep=""), sep="\t", row.names = F, quote = F)
# write percentage contributions to file
write.table(summary(pca)$importance[2,], paste("../output/", dirName, "/PCA.", file, ".FPKM", countfilter, ".perc.", dirName, ".txt", sep=""), sep="\t", row.names = T, quote = F)
## open the PDF
pointSize <- 0.4
pdf(paste("../output/", dirName, "/PCA.", file, ".FPKM", countfilter, ".", dirName, ".pdf", sep=""), onefile=T)
## print dendrogram
tiplabs <- as.phylo(hc)$tip.label
numbertiplabs<-length(tiplabs)
colourtips<-rep("blue",numbertiplabs)
colourtips[grep("CTR2",tiplabs)]<-"red"
plot.phylo(as.phylo(hc), type="p", show.node.label=TRUE, main=paste(file, "plotting FPKMs using [", length(uniqueSignificantGenes), "] genes.  Outliers removed are: [" , paste(outliers, collapse = " "), "]", sep=" "), cex=pointSize, cex.main=pointSize, tip.color=colourtips)
## print PCA windows
for (x in pcaWindows) {
print(qplot(x=PC1, y=PC2, main = paste(file, "plotting FPKMs using [", length(uniqueSignificantGenes), "] genes.  Outliers removed are: [" , paste(outliers, collapse = " "), "]", sep=" "), data=scores, label=factor(targets$analysisID), colour=factor(targets[[x]])) + geom_text_repel(size=2.5) +  scale_colour_discrete(name=x) + theme(plot.title = element_text(size = 5))  )
}
dev.off()
}
}
}
}
setwd("~/OneDrive - Cardiff University/04-work/analysis/peter_ghazal_temp/an0304/an0304/bin")
#countInputFiles <- c("all.markdup.genecount", "all.rmdup.genecount")
countInputFiles <- c("all.markdup.genecount")
fpkmCountfilters <- c("nofilter", 0, 0.5, 5, 10)
#fpkmCountfilters <- c(5)
myComparisons <- c("C-LOS_vs_Contaminant", "C-LOS_vs_N-LOS", "C-LOS_vs_P-LOS", "N-LOS_vs_Contaminant", "N-LOS_vs_C-LOS", "N-LOS_vs_P-LOS", "P-LOS_vs_Contaminant", "P-LOS_vs_N-LOS", "P-LOS_vs_C-LOS", "Contaminant_vs_C-LOS", "Contaminant_vs_N-LOS", "Contaminant_vs_P-LOS")
apadjCutoffs <- c("allgenes", "top50genes", "sig0-01", "sig0-05")
#outliers <- NULL
## reasons for removing = low yield
## note low run are retained, because taking them out gives no significant genes ("11289_ICG200462A", "81051_SOG1000041A")
outliers <- NULL
## first-round
#outliers <- c("10481_sepsis", "10108_sepsis", "10501_Index", "10127_sepsis", "10281_Index", "10509_Index")
pcaWindows <- c("sampleGroup")
library(DESeq2)     # differential analysis
library(ape)        # clustering QC
library(ggplot2)    # PCA plotting
library(ggrepel)
library(dplyr)            # data manipulations
## get top, middle and bottom
rawDataTop <- read.table("../input/top/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
rawDataMiddle <- read.table("../input/middle/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
rawDataBottom <- read.table("../input/bottom/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
## get the topups
rawDataTopups <- read.table("../input/topups/all.markdup.genecount.txt", sep="\t", header=T, check.names=F)
rawData <- merge(rawDataTop, rawDataMiddle, by="ensemblGeneID")
rawData <-  dplyr::select(rawData, -geneLength.y, -geneName.y, -geneBiotype.y)
colnames(rawData)[2:4] <- c("geneLength", "geneName", "geneBiotype")
rawData <- merge(rawData, rawDataBottom, by="ensemblGeneID")
rawData <-  dplyr::select(rawData, -geneLength.y, -geneName.y, -geneBiotype.y)
colnames(rawData)[2:4] <- c("geneLength", "geneName", "geneBiotype")
## get a list of merged samples
repalcedups <- c()
## paranoia check: are the order of genes the same in the tops and the top-ups??
if (all(rawData$ensemblGeneID != rawDataTopups$ensemblGeneID)) { stop() }
mergedRawData <- rawData
for (coln in colnames(dplyr::select(rawDataTopups, -ensemblGeneID, -geneLength, -geneName, -geneBiotype))) {
oldColn <- gsub(".b", "", coln)
oldColn <- gsub("NO_LOS", "NOLOS", oldColn)
if (oldColn %in% colnames(mergedRawData)) {
mergedRawData[oldColn] <- mergedRawData[oldColn] + rawDataTopups[coln]
repalcedups <- c(repalcedups, oldColn)
}
}
topupColnames <- gsub("NO_LOS", "NOLOS", gsub(".b", "", colnames(dplyr::select(rawDataTopups, -ensemblGeneID, -geneLength, -geneName, -geneBiotype))))
if (all(topupColnames != repalcedups)) { stop() }
write.table(mergedRawData, file="../input/uber/all.markdup.genecount.txt", sep="\t", row.names = F, col.names = T, quote = F)
RunDeseq2 <- function(rc, gl) {
## create the experimental design object for DeSeq2
exptDesign <- data.frame(
row.names = colnames(rc),
condition = sampleGroups)
## construct experiment object
exptObject <- DESeqDataSetFromMatrix(
countData = rc,
colData = exptDesign,
design = ~ condition)
## run the anlysis
analysisObject = DESeq(exptObject)
## add gene lengths to the analysis object for the FPKM calculation
geneLengthsTemp <- gl[gl$ensemblGeneID %in% rownames(analysisObject),]
mcols(analysisObject)$basepairs <- geneLengthsTemp[match(rownames(analysisObject), geneLengthsTemp$ensemblGeneID),]$geneLength
return(analysisObject)
}
GetUniqueGenes <- function(anr, ty) {
sgenes <- NULL
anr <- anr[order(anr$pvalue), ]
if (ty == "allgenes") {
sgenes <- rownames(anr)
} else if (grepl("^sig", ty)) {
ty <- gsub("-", ".", gsub("sig", "", ty))
## need to get genes that are also NA but significant
for (i in 1:length(anr[,1])) {
if (is.na(anr[i,]$padj)) {
sgenes <- c(sgenes, rownames((anr[i,])))
} else if ((as.numeric(anr[i,]$padj) < as.numeric(ty))) {
sgenes <- c(sgenes, rownames((anr[i,])))
} else {
break
}
}
} else if (grepl("^top", ty)) {
ty <- gsub("top", "", gsub("genes", "", ty))
sgenes <- rownames(anr[1:as.numeric(ty),])
} else {
stop("cuttoff not recognised")
}
return (sgenes)
}
countfilter <- 0.5
targets <- read.table("../resources/targets.csv", sep=",", header=T)
targets
countInputFile <- "all.markdup.genecount"
rawCounts = read.table(paste("../input/uber/", file, ".txt", sep=""), sep="\t", header=TRUE, check.names=F)
file <- "all.markdup.genecount"
rawCounts <- read.table(paste("../input/uber/", file, ".txt", sep=""), sep="\t", header=TRUE, check.names=F)
if (length(outliers) > 0) {
targets <- targets[!targets$analysisID %in% outliers, ]
rawCounts <- rawCounts[, !(names(rawCounts) %in% outliers)]
}
outliers
colnames(rawCounts) <- sub("-", ".", colnames(rawCounts))
rawCounts)
annotationNames <- rawCounts[,c(1:4)]
# get the sample groups and mouse definitions from targets
sampleGroups <- targets$sampleGroup
colnames(rawCounts) <- sub("-", ".", colnames(rawCounts))
# parse out the 3 first columns of annotation
annotationNames <- rawCounts[,c(1:4)]
# get the sample groups and mouse definitions from targets
sampleGroups <- targets$sampleGroup
rownames(rawCounts) = rawCounts[,1]
rawCounts[,c(1:4)] <- NULL
## check the order of the targets files and input counts file are identical
if (!identical(as.character(targets$analysisID), colnames(rawCounts))) {
rawCounts <- dplyr::select(rawCounts, as.character(targets$analysisID))
}
analysisObject <- RunDeseq2(rawCounts, geneLengths)
## get FPKM normalised data from the analysis object
rawCounts <- counts(analysisObject, normalized = FALSE)
fpkmNormalisedCounts <- fpkm(analysisObject, robust = TRUE)
if (!identical(rownames(rawCounts), rownames(fpkmNormalisedCounts))) {
stop()
}
geneLengths <- dplyr::select(rawData, ensemblGeneID, geneLength)
rawCounts <- counts(analysisObject, normalized = FALSE)
fpkmNormalisedCounts <- fpkm(analysisObject, robust = TRUE)
analysisObject <- RunDeseq2(rawCounts, geneLengths)
coefficientOfVariationCutoff <- 10
fpkmNormalisedCounts
rawCounts <- counts(analysisObject, normalized = FALSE)
fpkmNormalisedCounts <- fpkm(analysisObject, robust = TRUE)
fpkmNormalisedCounts
View(fpkmNormalisedCounts)
cov <- sapply(fpkmNormalisedCounts, function(x) sd(x) / mean(x) * 100)
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
head(c0v)
head(cov)
cov
class(cov)
colnames(cov)
colnames(cov)
rownames(cov)
names(cov)
length(cov)
cov[cov < coefficientOfVariationCutoff ] <- NULL
cov <- cov[cov < coefficientOfVariationCutoff]
length(cov)
names(cov)
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
cov <- cov[cov < coefficientOfVariationCutoff]
length(cov)
names(cov)
coefficientOfVariationCutoff
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
cov
cov <- cov[cov > coefficientOfVariationCutoff]
cov
length(cov)
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
order(cov)
sort(cov)
reversesort(cov))
reverse(sort(cov))
?sort
sort(cov, decreasing = T)
cov <- cov[cov >= coefficientOfVariationCutoff]
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
cov <- cov[cov < coefficientOfVariationCutoff]
cov
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
coefficientOfVariationCutoff
class(coefficientOfVariationCutoff)
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
cov <- cov[cov >= coefficientOfVariationCutoff]
cov <- apply(fpkmNormalisedCounts, 1, function(x) sd(x) / mean(x) * 100)
head(cov)
mean(fpkmNormalisedCounts[1,])
fpkmNormalisedCounts[1,]
sd(fpkmNormalisedCounts[1,])
mean(fpkmNormalisedCounts[1,])
mean(fpkmNormalisedCounts[1,]) / sd(fpkmNormalisedCounts[1,])
head(cov)
sd(fpkmNormalisedCounts[1,]) / mean(fpkmNormalisedCounts[1,])
